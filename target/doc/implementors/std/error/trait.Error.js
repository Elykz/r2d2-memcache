(function() {var implementors = {};
implementors["antidote"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"antidote/struct.TryLockError.html\" title=\"struct antidote::TryLockError\">TryLockError</a>",synthetic:false,types:["antidote::TryLockError"]},];
implementors["log"] = ["impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='struct' href='log/struct.SetLoggerError.html' title='log::SetLoggerError'>SetLoggerError</a>","impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='struct' href='log/struct.ShutdownLoggerError.html' title='log::ShutdownLoggerError'>ShutdownLoggerError</a>",];implementors["memcache"] = ["impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='enum' href='memcache/enum.MemcacheError.html' title='memcache::MemcacheError'>MemcacheError</a>",];implementors["antidote"] = ["impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='struct' href='antidote/struct.TryLockError.html' title='antidote::TryLockError'>TryLockError</a>",];implementors["r2d2"] = ["impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='struct' href='r2d2/struct.InitializationError.html' title='r2d2::InitializationError'>InitializationError</a>","impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='struct' href='r2d2/struct.GetTimeout.html' title='r2d2::GetTimeout'>GetTimeout</a>",];implementors["r2d2_memcache"] = ["impl <a class='trait' href='https://doc.rust-lang.org/nightly/std/error/trait.Error.html' title='std::error::Error'>Error</a> for <a class='enum' href='r2d2_memcache/error/enum.Error.html' title='r2d2_memcache::error::Error'>Error</a>",];
implementors["memcache"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"memcache/enum.MemcacheError.html\" title=\"enum memcache::MemcacheError\">MemcacheError</a>",synthetic:false,types:["memcache::error::MemcacheError"]},];
implementors["r2d2"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"r2d2/struct.Error.html\" title=\"struct r2d2::Error\">Error</a>",synthetic:false,types:["r2d2::Error"]},];
implementors["r2d2_memcache"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"r2d2_memcache/error/enum.Error.html\" title=\"enum r2d2_memcache::error::Error\">Error</a>",synthetic:false,types:["r2d2_memcache::error::Error"]},];
implementors["rand"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"rand/jitter/enum.TimerError.html\" title=\"enum rand::jitter::TimerError\">TimerError</a>",synthetic:false,types:["rand::jitter::TimerError"]},];
implementors["url"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"url/enum.ParseError.html\" title=\"enum url::ParseError\">ParseError</a>",synthetic:false,types:["url::parser::ParseError"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
